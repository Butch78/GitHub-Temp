# This is a basic workflow to help you get started with Actions
name: CI
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on in this case windows:
    runs-on: [windows-latest]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Runs a single command using the runners shell
    - name: Import Tenant
      env: 
        ClientId: 601b14d9-d1e8-4e74-8440-36e1e5a5ac84
        IdHostName: datagovernor-dev-id.azurewebsites.net
        ApiHostName: datagovernor-dev-api.azurewebsites.net
        AgentHostName: PerDev-DG21.bizdata.local
      shell: pwsh
      run: |
        try {
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        $ClientId = $env:ClientId;
        $IdHostName= $env:IdHostName;
            
        $TokenRequestBody = @{
            "grant_type"    = "client_credentials";
            "client_id"     = $ClientId;
            "client_secret" = $ClientId;
            "scope"         = "webApi"
        };
        $AccessToken = ((Invoke-WebRequest -Uri "https://$IdHostName/connect/token" -Method Post -Body $TokenRequestBody).Content | ConvertFrom-Json).access_token;
            
        $ArtifactOutputDir = "D:\a\GitHub-Temp\GitHub-Temp"
        $ApiHostName = $env:ApiHost;
        $BaseUrl = "https://$env:ApiHostName/api/v1/";
        $AgentHostname = $env:AgentHostName;
            
        function Upload-Zip ($ZipLocation) {
            $AccessHeaders = @{"Authorization" = "bearer $AccessToken" }
            
            $ZipUploadUrl = $BaseUrl + "Import/Zip?agentHostName=$AgentHostName";
            
            try {
                Write-Output "Start of upload";
                $Response = Invoke-RestMethod $ZipUploadUrl -Method 'POST' -Headers $AccessHeaders -InFile $ZipLocation -ContentType "application/zip";
                Write-Output $Response;
                Write-Output "Success?"
            }
            catch {
                $Exception = $_.Exception;
                try {
                  if ($PSVersionTable.PSVersion.Major -lt 6) {
                      if ($Exception.Response) {  
                          
                            $Reader = New-Object System.IO.StreamReader($Exception.Response.GetResponseStream())
                            $Reader.BaseStream.Position = 0
                            $Reader.DiscardBufferedData()
                            $ResponseBody = $Reader.ReadToEnd()
                            if ($ResponseBody.StartsWith('{')) {
                                $ResponseBody = $ResponseBody | ConvertFrom-Json
                            }
                            Write-Output $ResponseBody;                        
                      }
                  }
                  else {
                      Write-Output $Exception.ErrorDetails.Message
                  }
                } catch {
                  Write-Output "Failed Error Message Output"
                  Write-Output $_.Exception.Message;
                }  
                Write-Output "Failure on Upload"
            }
        }
        
        $ZipPath = "tenant.zip";
        Remove-Item $ZipPath -ErrorAction Ignore;
        ls -r $ArtifactOutputDir
        Compress-Archive -Path $ArtifactOutputDir -DestinationPath $ZipPath
        Upload-Zip -ZipLocation $ZipPath;
        }
        catch {
          Write-Output "Failed Run"
          Write-Output $_.Exception.Message;
        }
    - name: Upload Zipped Tenant
      uses: actions/upload-artifact@v1
      with:
        name: Tenant
        path: "tenant.zip"